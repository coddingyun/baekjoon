#include <iostream>
#include <vector>
#include <algorithm>
#include <string.h> //memset
bool visit[51][51];
int n,m;
std::vector<int> adj;
int arr[51][51];
int k;
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};
int DFS(int x, int y){
    k++;
    visit[x][y]=true;
    for (int i=0; i<4; i++){
        int cx=x+dx[i];
        int cy=y+dy[i];
        if (cx<0||cx>=n||cy<0||cy>=m) continue;
        if (visit[cx][cy]==0 && arr[cx][cy]==1){
            DFS(cx,cy);
        }

    }
    return k;
}
int main(){
    using namespace std;
    int T, K, a, b;
    cin >> T;
    for (int i=0; i<T; i++){
        cin >> n >> m >> K;
        for (int j=0; j<K; j++){
            cin >> a >> b;
            arr[a][b]=1;
        }
        for (int i=0; i<n; i++){
            for (int j=0; j<m; j++){
                if (arr[i][j]==1 && visit[i][j]==false){
                    k=0;
                    adj.push_back(DFS(i,j));
                }
            }
        }
        cout << adj.size() <<"\n";
        while(!adj.empty()){
            adj.pop_back();
        }
        memset(visit,0,sizeof(visit));
        memset(arr,0,sizeof(arr));
    }
}
